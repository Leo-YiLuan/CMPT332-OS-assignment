# NAME: Matthew Munro
# NSID: mam552
# STUDENT NUMBER: 11291769
# NAME: Yi Luan
# NSID: yil160
# STUDENT NUMBER: 11253856
# CMPT 332 2022
# A1 Phase 1


General Program Flow:

The main function parses the arguments passed in through argv via a seperate
function parse_args. This is done because args between the different 
executables will not change, so we can reuse this function in every 
executable for Part A.
We would then use a loop to construct the platform/library specific threads as 
necessary for each part. We can wrap isRunning (as applicable) in a platform
specific mutex to ensure race conditions can't cause a thread to run one 
extra time when it shouldn't. For Part A2, we will of course need to use Kill
as opposed to a shared global. For Part A3 returning to the use of a shard 
global seems reasonable. 


Functions:

parse_args:
    Tests user-supplied arguments for correctness. Ensures the correct number 
    of arguments are supplied and that they are in a valid range. 

    PRECONDITIONS: none
    POSTCONDITIONS: 
      If parsing arguments fails, a message is written to stderr.
    PARAMS: 
      argc: the number of arguments to parse.
      argv: An array of char pointers each containing a null-terminated arg.
      outThreads: a pointer to be filled with the desired number of threads. 
      outDeadline: a pointer to be filled with the maximum time the process 
                   should run, in seconds.
      outSize: a pointer to be filled with the number of threads to create. 

      RETURN:
        1 on success, 0 on failure. 

fib:
      Calculates the nth fibonacci number. 

      PRECONDITIONS: value >= 0
      POSTCONDITIONS: none
      PARAMS:
        value: the nth fibonacci number to calculate. 
      RETURN:
        the nth fibonacci number. 

thread_start (part A1):
      The entry point for a Win32 child thread. 

      PRECONDITIONS: none
      POSTCONDITIONS: 
        a global array of counters is modified to denote the number of 
        executions of fib by a specific child thread identified by 
        some thread id.
      PARAMS: 
        fibData: a void pointer to the nth fibonacci number to calculate.
      RETURNS:
        Unused, but returns an unsigned integer to comply with the 
        Win32 API requirements. 


Considerations for Part B & C: 
* It may be a good idea to wrap our isRunning global variable in a Win32 mutex.
* How to index threads by ID. The number of threads isn't known until run-time.
  Should probably define a reasonable constant max, MAX_THREADS, that will 
  be allowed.