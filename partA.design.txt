# NAME: Matthew Munro
# NSID: mam552
# STUDENT NUMBER: 11291769
# NAME: Yi Luan
# NSID: yil160
# STUDENT NUMBER: 11253856
# CMPT 332 2022
# A1 Phase 1

The main function parses the arguments passed in through argv via a seperate
function parse_args. This is done because args between the different 
executables will not change, so we can reuse this function in every 
executable for Part A. Return type can be checked to determine whether 
argument parsing was successful.

CreateThread is called, passing the fibonacci size parameter into a function
where the child thread will live for the duration of its lifetime. The
signature is unsigned int (*)(void*) as is required by the CreateThread 
api call. main will need to use GetLastError() in the future in order
to perform api error checking. 

fib(), as specified in the assignment documentation, is also moved to a 
seperate c file in order to facilitate code reuse. It is a simple recursive 
function that accepts as a parameter the nth fibonacci number to calculate,
where n >= 0. The function will return -1 to indicate an error in the
parameter supplied. 

Considerations for Part B & C: 
* It may be a good idea to wrap our isRunning global variable in a Win32 mutex.
* How to index threads by ID. The number of threads isn't known until run-time.
  Should probably define a constant, MAX_THREADS, that will be allowed.